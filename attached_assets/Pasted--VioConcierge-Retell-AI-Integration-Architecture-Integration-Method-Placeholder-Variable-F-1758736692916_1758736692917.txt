# VioConcierge â†’ Retell AI Integration Architecture

## Integration Method: **Placeholder Variable Feeding (Option 2)**

VioConcierge **does NOT store the full Retell AI script**. Instead, it uses **Retell AI's dynamic variable system** where:

1. **Retell AI agent has its own conversational AI/script** (stored on Retell AI's side)
2. **VioConcierge feeds placeholder data** to the Retell AI agent
3. **Retell AI agent incorporates the data** into natural conversation flow

---

## ðŸ”„ **Technical Process**

### **How the Integration Actually Works**

```typescript
RetellAIIntegrationArchitecture {
  // VioConcierge's Role
  vioconcierge_responsibility: {
    data_extraction: "Extract contact fields from database",
    data_processing: "Format fields for voice delivery", 
    variable_mapping: "Map fields to Retell AI variable names",
    api_transmission: "Send variables via retell_llm_dynamic_variables parameter"
  },
  
  // Retell AI's Role  
  retell_ai_responsibility: {
    script_storage: "Retell AI stores the conversational script/prompt",
    conversation_ai: "Retell AI's LLM generates natural conversation",
    variable_incorporation: "AI incorporates VioConcierge variables into conversation",
    call_execution: "Retell AI handles the actual voice call and interaction"
  }
}
```

### **What VioConcierge Actually Sends**

```python
# VioConcierge sends ONLY the data variables, not the script
retell_api_payload = {
    "from_number": "+447403305280",
    "to_number": "+447912345678",
    "agent_id": "agent_e53a44a8e7abed30866388d300",
    
    # THIS IS ALL VIOCONCIERGE SENDS - Just the data variables
    "retell_llm_dynamic_variables": {
        "customer_name": "Sarah Johnson",
        "business_name": "Luxury Hair Studio", 
        "appointment_date": "Monday, January 15th",
        "appointment_time": "2:30 PM",
        "service_type": "Hair Color and Cut",
        "stylist_name": "Maria",
        "callback_number": "074-0330-5280"
    }
}

# VioConcierge does NOT send:
# - The actual conversation script
# - The voice prompts
# - The conversational flow
# - The AI instructions
```

### **What Retell AI Does With the Variables**

```typescript
RetellAIProcessing {
  // Retell AI Agent Configuration (stored on Retell AI's platform)
  agent_setup: {
    system_prompt: "Stored on Retell AI platform - VioConcierge doesn't control this",
    conversation_flow: "Retell AI's LLM handles the conversation logic",
    voice_settings: "Retell AI manages voice, tone, speed, etc.",
    response_handling: "Retell AI processes customer responses (DTMF, speech)"
  },
  
  // How Retell AI Uses VioConcierge Variables
  variable_incorporation: {
    natural_language_generation: "Retell AI's LLM naturally incorporates variables into conversation",
    context_awareness: "AI understands the appointment context from variables",
    dynamic_conversation: "AI can reference any variable naturally during conversation",
    adaptive_script: "AI adapts conversation based on customer responses and available variables"
  }
}
```

---

## ðŸ“‹ **Exact Technical Implementation**

### **VioConcierge's Variable Preparation**

```python
async def prepare_variables_for_retell(contact: dict, tenant_config: dict) -> dict:
    """
    VioConcierge's role: Prepare contact data as variables for Retell AI
    VioConcierge does NOT store or manage the Retell AI conversation script
    """
    
    # Extract and format contact data
    variables = {
        # Direct field mappings
        "customer_name": contact.get("name", ""),
        "business_name": tenant_config.get("company_name", ""),
        "callback_number": format_phone_for_voice(tenant_config.get("retell_agent_number", "")),
        
        # Processed appointment time
        "appointment_date": format_date_from_iso(contact.get("appointment_time")),
        "appointment_time": format_time_from_iso(contact.get("appointment_time")),
        
        # Optional fields (if present)
        "appointment_type": contact.get("appointment_type", ""),
        "appointment_duration": format_duration(contact.get("appointment_duration")),
        "provider_name": contact.get("owner_name", ""),
        "special_instructions": contact.get("special_instructions", "")
    }
    
    # Remove empty variables
    variables = {k: v for k, v in variables.items() if v}
    
    logger.info(f"ðŸ“¤ Prepared {len(variables)} variables for Retell AI")
    return variables

async def send_call_to_retell_ai(contact: dict, tenant_config: dict):
    """
    Send call request to Retell AI with VioConcierge contact variables
    Retell AI handles the script and conversation
    """
    
    # Prepare variables from VioConcierge contact
    retell_variables = await prepare_variables_for_retell(contact, tenant_config)
    
    # API call to Retell AI
    payload = {
        "agent_id": tenant_config["retell_agent_id"],
        "from_number": tenant_config["retell_agent_number"],
        "to_number": contact["phone"],
        
        # Send ONLY the variables - Retell AI handles the script
        "retell_llm_dynamic_variables": retell_variables
    }
    
    # Retell AI receives the variables and their AI agent incorporates them
    response = await httpx.post("https://api.retellai.com/v2/create-phone-call", json=payload)
    
    # VioConcierge's job is done - Retell AI takes over the conversation
    return response
```

### **What Happens on Retell AI's Side**

```typescript
RetellAISideProcessing {
  // Retell AI Agent Behavior (NOT controlled by VioConcierge)
  retell_agent_process: {
    1: "Receive VioConcierge variables via API call",
    2: "Load agent's conversational AI model and instructions", 
    3: "Incorporate variables into natural conversation context",
    4: "Generate personalized conversation based on variables + AI training",
    5: "Execute voice call with dynamic content",
    6: "Handle customer responses and conversation flow",
    7: "Send call outcome back to VioConcierge via webhook"
  },
  
  // Example of how Retell AI might use the variables (conceptual)
  variable_usage_example: {
    vioconcierge_sends: {
      "customer_name": "Sarah Johnson",
      "business_name": "Luxury Hair Studio",
      "appointment_date": "Monday, January 15th", 
      "service_type": "Hair Color and Cut",
      "stylist_name": "Maria"
    },
    
    retell_ai_incorporates: "The AI naturally weaves these into conversation",
    conversation_generation: "Retell AI's LLM creates appropriate dialogue using the variables",
    natural_speech: "AI delivers natural-sounding conversation with personalized details"
  }
}
```

---

## ðŸŽ¯ **Key Technical Points**

### **Division of Responsibilities**

```typescript
ResponsibilityDivision {
  // VioConcierge Handles:
  vioconcierge_scope: [
    "Contact data storage and management",
    "Field extraction from contact records", 
    "Business-type specific data processing",
    "HIPAA compliance filtering",
    "Variable formatting for voice delivery",
    "API call to Retell AI with variables",
    "Call outcome processing via webhook"
  ],
  
  // Retell AI Handles:
  retell_ai_scope: [
    "Conversational AI agent configuration",
    "Voice script generation and management",
    "Natural language conversation flow",
    "Customer interaction and response handling",
    "Voice synthesis and delivery",
    "Call progress monitoring",
    "Call outcome determination and reporting"
  ],
  
  // Integration Point:
  integration_boundary: {
    data_flow: "VioConcierge â†’ Variables â†’ Retell AI",
    control_boundary: "VioConcierge controls data, Retell AI controls conversation",
    customization: "VioConcierge customizes variables, Retell AI customizes conversation style"
  }
}
```

### **Why This Architecture**

```typescript
ArchitectureAdvantages {
  benefits_of_variable_feeding: [
    "Retell AI's conversational AI can naturally incorporate variables",
    "No need to store or manage complex voice scripts in VioConcierge",
    "Retell AI can handle dynamic conversation flow and customer responses",
    "Variables can be used flexibly throughout the conversation",
    "Easier to maintain - scripts managed by Retell AI specialists",
    "Better conversation quality - Retell AI's LLM optimizes delivery"
  ],
  
  vioconcierge_focus: [
    "Focus on contact management and business logic",
    "Handle compliance and privacy requirements",
    "Manage appointment scheduling and automation", 
    "Provide business-specific data processing"
  ]
}
```

**VioConcierge uses the placeholder variable feeding approach - it extracts contact information, processes it according to business type and compliance requirements, then sends the variables to Retell AI. Retell AI's conversational AI agent incorporates these variables into natural conversation flow during the voice call.** ðŸŽ¯